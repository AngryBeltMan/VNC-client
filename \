use futures_util::{SinkExt, StreamExt, stream::SplitStream};
use eframe::egui;
use tokio_tungstenite::*;
use rdev::{simulate,EventType,Key};
mod websocket;
mod gui;

#[tokio::main]
async fn main() -> Result<(),Box<dyn std::error::Error>> {
    let r = simulate(&EventType::KeyPress(Key::KeyS))?;
    let url = "ws://127.0.0.1:8080/ws/";
    let conn = connect_async(url).await?.0;
    let (mut sink,mut stream) = conn.split();
    websocket::read::send_image(&mut sink).await?;
    websocket::read::read_input(&mut stream).await?;
    Ok(())
}
struct MyApp {
    name: String,
    age: u32,
}

impl Default for MyApp {
    fn default() -> Self {
        Self {
            name: "Arthur".to_owned(),
            age: 42,
        }
    }
}

impl eframe::App for MyApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("My egui Application");
            ui.horizontal(|ui| {
                let name_label = ui.label("Your name: ");
                ui.text_edit_singleline(&mut self.name)
                    .labelled_by(name_label.id);
            });
            ui.add(egui::Slider::new(&mut self.age, 0..=120).text("age"));
            if ui.button("Click each year").clicked() {
                self.age += 1;
            }
            ui.label(format!("Hello '{}', age {}", self.name, self.age));
        });
    }
}
